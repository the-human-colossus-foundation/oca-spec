import{_ as p,r as l,c as o,a,b as n,e,w as t,d as c,o as i}from"./app-iW2lecvr.js";const r={},u=a("h1",null,"OCA Validator",-1),d=a("p",null,[a("strong",null,"OCA Validator"),n(" enables entry (or an array of entries) verification against predefined rules, given by the "),a("a",{href:"/ecosystem/oca-bundle"}," OCA Bundle "),n(". The verification executed on an entry, that is a map of key-value pairs, encompasses:")],-1),k=c(`<h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation"><span>Installation</span></a></h2><h3 id="rust" tabindex="-1"><a class="header-anchor" href="#rust"><span>Rust</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">[dependencies]</span>
<span class="line">oca_conductor = &quot;0.2.6&quot;</span>
<span class="line">oca_zip_resolver = &quot;0.2.6&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="typescript-and-javascript-node-js-based" tabindex="-1"><a class="header-anchor" href="#typescript-and-javascript-node-js-based"><span>Typescript and JavaScript (Node.JS based)</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">npm</span> i oca-data-validator</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h2><h3 id="rust-1" tabindex="-1"><a class="header-anchor" href="#rust-1"><span>Rust</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">oca_conductor<span class="token punctuation">::</span>data_set<span class="token punctuation">::</span></span><span class="token class-name">DataSet</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">oca_conductor<span class="token punctuation">::</span>data_set<span class="token punctuation">::</span></span><span class="token class-name">JSONDataSet</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">oca_conductor<span class="token punctuation">::</span></span><span class="token class-name">Validator</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">oca_zip_resolver<span class="token punctuation">::</span></span>resolve_from_zip<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> oca_result <span class="token operator">=</span> <span class="token function">resolve_from_zip</span><span class="token punctuation">(</span><span class="token string">&quot;oca_bundle.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> validator <span class="token operator">=</span> <span class="token class-name">Validator</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>oca_result<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    validator<span class="token punctuation">.</span><span class="token function">add_data_set</span><span class="token punctuation">(</span><span class="token class-name">JSONDataSet</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">r#&quot;{ &quot;email&quot;: &quot;test@example.com&quot;, &quot;licensess&quot;: [&quot;A&quot;] }&quot;#</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> validation_result <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> validation_result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ok(())</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>See also <a href="https://github.com/THCLab/oca-conductor/blob/main/conductor/src/validator/mod.rs" target="_blank" rel="noopener noreferrer"> tests </a> available for <code>validator</code> module.</p><h3 id="typescript-and-javascript-node-js-based-1" tabindex="-1"><a class="header-anchor" href="#typescript-and-javascript-node-js-based-1"><span>Typescript and JavaScript (Node.JS based)</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> resolveFromZip<span class="token punctuation">,</span> Validator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;oca-data-validator&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> oca <span class="token operator">=</span> <span class="token function">resolveFromZip</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oca_bundle.zip</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Validator</span><span class="token punctuation">(</span>oca<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&#39;email&#39;</span><span class="token operator">:</span> <span class="token string">&#39;test@example.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&#39;licenses&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>See also <a href="https://github.com/THCLab/oca-conductor/tree/main/bindings/node.js/pkg/validator/test" target="_blank" rel="noopener noreferrer">here</a> for more integration tests.</p>`,12);function v(m,h){const s=l("RouteLink");return i(),o("div",null,[u,d,a("ul",null,[a("li",null,[n("type checking, so whether a value matches the expected type (defined in "),e(s,{to:"/specification/#capture-base"},{default:t(()=>[n("Capture Base")]),_:1}),n(") or can be implicitly coerced to it;")]),a("li",null,[n("task (overlay) specific verification, including: "),a("ul",null,[a("li",null,[e(s,{to:"/specification/#character-encoding-overlay"},{default:t(()=>[n(" character encoding overlay ")]),_:1})]),a("li",null,[e(s,{to:"/specification/#format-overlay"},{default:t(()=>[n(" format overlay ")]),_:1})]),a("li",null,[e(s,{to:"/specification/#cardinality-overlay"},{default:t(()=>[n(" cardinality overlay ")]),_:1})]),a("li",null,[e(s,{to:"/specification/#conformance-overlay"},{default:t(()=>[n(" conformance overlay ")]),_:1})]),a("li",null,[e(s,{to:"/specification/#entry-code-overlay"},{default:t(()=>[n(" entry code overlay ")]),_:1})])])])]),k])}const g=p(r,[["render",v],["__file","oca-validator.html.vue"]]),y=JSON.parse('{"path":"/ecosystem/oca-validator.html","title":"OCA Validator","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Installation","slug":"installation","link":"#installation","children":[{"level":3,"title":"Rust","slug":"rust","link":"#rust","children":[]},{"level":3,"title":"Typescript and JavaScript (Node.JS based)","slug":"typescript-and-javascript-node-js-based","link":"#typescript-and-javascript-node-js-based","children":[]}]},{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[{"level":3,"title":"Rust","slug":"rust-1","link":"#rust-1","children":[]},{"level":3,"title":"Typescript and JavaScript (Node.JS based)","slug":"typescript-and-javascript-node-js-based-1","link":"#typescript-and-javascript-node-js-based-1","children":[]}]}],"git":{"updatedTime":1743089775000},"filePathRelative":"ecosystem/oca-validator.md"}');export{g as comp,y as data};
